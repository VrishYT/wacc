package wacc

import scala.io.Source

import java.nio.file.{Files, Paths}

object Main {
    def main(args: Array[String]): Unit = {
        if (args.length == 0) {
            printUsage
            return
        }

        val targetIndex = args.length - 1

        val filename = args(targetIndex)
        val path = Paths.get(filename)
        if (!Files.exists(path)) {
            errorAndExit("'" + filename + "' not found.")
        }

        val fileData = openFile(filename)
        println(fileData) 
        
    }

    def errorAndExit(msg: String): Unit = {
        System.err.println(msg)
        System.exit(-1)
    }

    private def printUsage = {
        println("Usage: ./compile [options] <target.wacc>")
        println("   options:")
        println("       -p, --only-parse        Parse only. Check the input file for syntax errors and generate an AST.")
        println("       -s, --only-typecheck    Semantic check. Parse the file for syntax and semantic errors and generate an AST.")
        println("       -c, --full-compile      Full Compilation (default). Run the full compilation process.")
        println("       -t, --target            Target. Select target architecture (default arm32, options: x86-64-intel or x86-64).")
        println("       -o, --optimise          Optimise. Run ARM Peephole optimisations over the generated assembly code.")
        println("       -a, --print-assembly    View Assembly. Display ARM assembly code generated by the code generator.")
        println("       -x, --execute           Execute. Assemble and Emulate the generated ARM code and display its output.")
        println("       -d, --directory         Give directory of wacc files.")
        println("       -h, --help              Show this message.")
        println()
        println("   target.wacc: path to wacc program file to compile (or target directory if --directory option set)")
    }

    def openFile(path: String) : String = {
        val builder = new StringBuilder()
        for (line <- Source.fromFile(path).getLines()) {
            builder.append(line)
            builder.append("\n")
        }
        return builder.toString()
        
    }

}

